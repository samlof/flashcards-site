scalar Time

type Word {
  id: ID!
  lang1: String!
  lang2: String!
  word1: String!
  word2: String!
  createTime: Time!
  updateTime: Time!
}

extend type Query {
  getWords: [Word!]!
}

input NewWord {
  lang1: String!
  lang2: String!
  word1: String!
  word2: String!
}

input UpdateWord {
  id: ID!
  lang1: String!
  lang2: String!
  word1: String!
  word2: String!
}

extend type Mutation {
  createWord(input: NewWord!): Word!
  deleteWord(id: ID!): ID!
  updateWord(input: UpdateWord!): Word!
}
