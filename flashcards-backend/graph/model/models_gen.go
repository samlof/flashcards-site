// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CardLog struct {
	ID           string     `json:"id"`
	Word         *Word      `json:"word"`
	ScheduledFor time.Time  `json:"scheduledFor"`
	LastResult   CardResult `json:"lastResult"`
}

type NewWord struct {
	Lang1 string `json:"lang1"`
	Lang2 string `json:"lang2"`
	Word1 string `json:"word1"`
	Word2 string `json:"word2"`
}

type UpdateWord struct {
	ID    string `json:"id"`
	Lang1 string `json:"lang1"`
	Lang2 string `json:"lang2"`
	Word1 string `json:"word1"`
	Word2 string `json:"word2"`
}

type Word struct {
	ID         string    `json:"id"`
	Lang1      string    `json:"lang1"`
	Lang2      string    `json:"lang2"`
	Word1      string    `json:"word1"`
	Word2      string    `json:"word2"`
	CreateTime time.Time `json:"createTime"`
	UpdateTime time.Time `json:"updateTime"`
}

type CardResult string

const (
	CardResultGood    CardResult = "Good"
	CardResultAverage CardResult = "Average"
	CardResultBad     CardResult = "Bad"
)

var AllCardResult = []CardResult{
	CardResultGood,
	CardResultAverage,
	CardResultBad,
}

func (e CardResult) IsValid() bool {
	switch e {
	case CardResultGood, CardResultAverage, CardResultBad:
		return true
	}
	return false
}

func (e CardResult) String() string {
	return string(e)
}

func (e *CardResult) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CardResult(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CardResult", str)
	}
	return nil
}

func (e CardResult) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
