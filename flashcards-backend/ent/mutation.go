// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"flashcards-backend/ent/cardlog"
	"flashcards-backend/ent/cardschedule"
	"flashcards-backend/ent/predicate"
	"flashcards-backend/ent/user"
	"flashcards-backend/ent/usersettings"
	"flashcards-backend/ent/word"
	"fmt"
	"sync"
	"time"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCardLog      = "CardLog"
	TypeCardSchedule = "CardSchedule"
	TypeUser         = "User"
	TypeUserSettings = "UserSettings"
	TypeWord         = "Word"
)

// CardLogMutation represents an operation that mutate the CardLogs
// nodes in the graph.
type CardLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	result        *cardlog.Result
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	card          *int
	clearedcard   bool
	done          bool
	oldValue      func(context.Context) (*CardLog, error)
	predicates    []predicate.CardLog
}

var _ ent.Mutation = (*CardLogMutation)(nil)

// cardlogOption allows to manage the mutation configuration using functional options.
type cardlogOption func(*CardLogMutation)

// newCardLogMutation creates new mutation for $n.Name.
func newCardLogMutation(c config, op Op, opts ...cardlogOption) *CardLogMutation {
	m := &CardLogMutation{
		config:        c,
		op:            op,
		typ:           TypeCardLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCardLogID sets the id field of the mutation.
func withCardLogID(id int) cardlogOption {
	return func(m *CardLogMutation) {
		var (
			err   error
			once  sync.Once
			value *CardLog
		)
		m.oldValue = func(ctx context.Context) (*CardLog, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CardLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCardLog sets the old CardLog of the mutation.
func withCardLog(node *CardLog) cardlogOption {
	return func(m *CardLogMutation) {
		m.oldValue = func(context.Context) (*CardLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CardLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CardLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CardLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the create_time field.
func (m *CardLogMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the create_time value in the mutation.
func (m *CardLogMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old create_time value of the CardLog.
// If the CardLog object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CardLogMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime reset all changes of the "create_time" field.
func (m *CardLogMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetResult sets the result field.
func (m *CardLogMutation) SetResult(c cardlog.Result) {
	m.result = &c
}

// Result returns the result value in the mutation.
func (m *CardLogMutation) Result() (r cardlog.Result, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old result value of the CardLog.
// If the CardLog object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CardLogMutation) OldResult(ctx context.Context) (v cardlog.Result, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResult is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ResetResult reset all changes of the "result" field.
func (m *CardLogMutation) ResetResult() {
	m.result = nil
}

// SetUserID sets the user edge to User by id.
func (m *CardLogMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *CardLogMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *CardLogMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *CardLogMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CardLogMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *CardLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetCardID sets the card edge to Word by id.
func (m *CardLogMutation) SetCardID(id int) {
	m.card = &id
}

// ClearCard clears the card edge to Word.
func (m *CardLogMutation) ClearCard() {
	m.clearedcard = true
}

// CardCleared returns if the edge card was cleared.
func (m *CardLogMutation) CardCleared() bool {
	return m.clearedcard
}

// CardID returns the card id in the mutation.
func (m *CardLogMutation) CardID() (id int, exists bool) {
	if m.card != nil {
		return *m.card, true
	}
	return
}

// CardIDs returns the card ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CardID instead. It exists only for internal usage by the builders.
func (m *CardLogMutation) CardIDs() (ids []int) {
	if id := m.card; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCard reset all changes of the "card" edge.
func (m *CardLogMutation) ResetCard() {
	m.card = nil
	m.clearedcard = false
}

// Op returns the operation name.
func (m *CardLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CardLog).
func (m *CardLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CardLogMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.create_time != nil {
		fields = append(fields, cardlog.FieldCreateTime)
	}
	if m.result != nil {
		fields = append(fields, cardlog.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CardLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cardlog.FieldCreateTime:
		return m.CreateTime()
	case cardlog.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CardLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cardlog.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case cardlog.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown CardLog field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CardLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cardlog.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case cardlog.FieldResult:
		v, ok := value.(cardlog.Result)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown CardLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CardLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CardLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CardLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CardLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CardLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CardLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CardLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CardLog nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CardLogMutation) ResetField(name string) error {
	switch name {
	case cardlog.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case cardlog.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown CardLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CardLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, cardlog.EdgeUser)
	}
	if m.card != nil {
		edges = append(edges, cardlog.EdgeCard)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CardLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cardlog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case cardlog.EdgeCard:
		if id := m.card; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CardLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CardLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CardLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, cardlog.EdgeUser)
	}
	if m.clearedcard {
		edges = append(edges, cardlog.EdgeCard)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CardLogMutation) EdgeCleared(name string) bool {
	switch name {
	case cardlog.EdgeUser:
		return m.cleareduser
	case cardlog.EdgeCard:
		return m.clearedcard
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CardLogMutation) ClearEdge(name string) error {
	switch name {
	case cardlog.EdgeUser:
		m.ClearUser()
		return nil
	case cardlog.EdgeCard:
		m.ClearCard()
		return nil
	}
	return fmt.Errorf("unknown CardLog unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CardLogMutation) ResetEdge(name string) error {
	switch name {
	case cardlog.EdgeUser:
		m.ResetUser()
		return nil
	case cardlog.EdgeCard:
		m.ResetCard()
		return nil
	}
	return fmt.Errorf("unknown CardLog edge %s", name)
}

// CardScheduleMutation represents an operation that mutate the CardSchedules
// nodes in the graph.
type CardScheduleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	scheduled_for *time.Time
	reviewed      *bool
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	card          *int
	clearedcard   bool
	done          bool
	oldValue      func(context.Context) (*CardSchedule, error)
	predicates    []predicate.CardSchedule
}

var _ ent.Mutation = (*CardScheduleMutation)(nil)

// cardscheduleOption allows to manage the mutation configuration using functional options.
type cardscheduleOption func(*CardScheduleMutation)

// newCardScheduleMutation creates new mutation for $n.Name.
func newCardScheduleMutation(c config, op Op, opts ...cardscheduleOption) *CardScheduleMutation {
	m := &CardScheduleMutation{
		config:        c,
		op:            op,
		typ:           TypeCardSchedule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCardScheduleID sets the id field of the mutation.
func withCardScheduleID(id int) cardscheduleOption {
	return func(m *CardScheduleMutation) {
		var (
			err   error
			once  sync.Once
			value *CardSchedule
		)
		m.oldValue = func(ctx context.Context) (*CardSchedule, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CardSchedule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCardSchedule sets the old CardSchedule of the mutation.
func withCardSchedule(node *CardSchedule) cardscheduleOption {
	return func(m *CardScheduleMutation) {
		m.oldValue = func(context.Context) (*CardSchedule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CardScheduleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CardScheduleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CardScheduleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the create_time field.
func (m *CardScheduleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the create_time value in the mutation.
func (m *CardScheduleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old create_time value of the CardSchedule.
// If the CardSchedule object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CardScheduleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime reset all changes of the "create_time" field.
func (m *CardScheduleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the update_time field.
func (m *CardScheduleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the update_time value in the mutation.
func (m *CardScheduleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old update_time value of the CardSchedule.
// If the CardSchedule object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CardScheduleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime reset all changes of the "update_time" field.
func (m *CardScheduleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetScheduledFor sets the scheduled_for field.
func (m *CardScheduleMutation) SetScheduledFor(t time.Time) {
	m.scheduled_for = &t
}

// ScheduledFor returns the scheduled_for value in the mutation.
func (m *CardScheduleMutation) ScheduledFor() (r time.Time, exists bool) {
	v := m.scheduled_for
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduledFor returns the old scheduled_for value of the CardSchedule.
// If the CardSchedule object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CardScheduleMutation) OldScheduledFor(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScheduledFor is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScheduledFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduledFor: %w", err)
	}
	return oldValue.ScheduledFor, nil
}

// ResetScheduledFor reset all changes of the "scheduled_for" field.
func (m *CardScheduleMutation) ResetScheduledFor() {
	m.scheduled_for = nil
}

// SetReviewed sets the reviewed field.
func (m *CardScheduleMutation) SetReviewed(b bool) {
	m.reviewed = &b
}

// Reviewed returns the reviewed value in the mutation.
func (m *CardScheduleMutation) Reviewed() (r bool, exists bool) {
	v := m.reviewed
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewed returns the old reviewed value of the CardSchedule.
// If the CardSchedule object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CardScheduleMutation) OldReviewed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReviewed is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReviewed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewed: %w", err)
	}
	return oldValue.Reviewed, nil
}

// ResetReviewed reset all changes of the "reviewed" field.
func (m *CardScheduleMutation) ResetReviewed() {
	m.reviewed = nil
}

// SetUserID sets the user edge to User by id.
func (m *CardScheduleMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *CardScheduleMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *CardScheduleMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *CardScheduleMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CardScheduleMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *CardScheduleMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetCardID sets the card edge to Word by id.
func (m *CardScheduleMutation) SetCardID(id int) {
	m.card = &id
}

// ClearCard clears the card edge to Word.
func (m *CardScheduleMutation) ClearCard() {
	m.clearedcard = true
}

// CardCleared returns if the edge card was cleared.
func (m *CardScheduleMutation) CardCleared() bool {
	return m.clearedcard
}

// CardID returns the card id in the mutation.
func (m *CardScheduleMutation) CardID() (id int, exists bool) {
	if m.card != nil {
		return *m.card, true
	}
	return
}

// CardIDs returns the card ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CardID instead. It exists only for internal usage by the builders.
func (m *CardScheduleMutation) CardIDs() (ids []int) {
	if id := m.card; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCard reset all changes of the "card" edge.
func (m *CardScheduleMutation) ResetCard() {
	m.card = nil
	m.clearedcard = false
}

// Op returns the operation name.
func (m *CardScheduleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CardSchedule).
func (m *CardScheduleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CardScheduleMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, cardschedule.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, cardschedule.FieldUpdateTime)
	}
	if m.scheduled_for != nil {
		fields = append(fields, cardschedule.FieldScheduledFor)
	}
	if m.reviewed != nil {
		fields = append(fields, cardschedule.FieldReviewed)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CardScheduleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cardschedule.FieldCreateTime:
		return m.CreateTime()
	case cardschedule.FieldUpdateTime:
		return m.UpdateTime()
	case cardschedule.FieldScheduledFor:
		return m.ScheduledFor()
	case cardschedule.FieldReviewed:
		return m.Reviewed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CardScheduleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cardschedule.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case cardschedule.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case cardschedule.FieldScheduledFor:
		return m.OldScheduledFor(ctx)
	case cardschedule.FieldReviewed:
		return m.OldReviewed(ctx)
	}
	return nil, fmt.Errorf("unknown CardSchedule field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CardScheduleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cardschedule.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case cardschedule.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case cardschedule.FieldScheduledFor:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduledFor(v)
		return nil
	case cardschedule.FieldReviewed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewed(v)
		return nil
	}
	return fmt.Errorf("unknown CardSchedule field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CardScheduleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CardScheduleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CardScheduleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CardSchedule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CardScheduleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CardScheduleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CardScheduleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CardSchedule nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CardScheduleMutation) ResetField(name string) error {
	switch name {
	case cardschedule.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case cardschedule.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case cardschedule.FieldScheduledFor:
		m.ResetScheduledFor()
		return nil
	case cardschedule.FieldReviewed:
		m.ResetReviewed()
		return nil
	}
	return fmt.Errorf("unknown CardSchedule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CardScheduleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, cardschedule.EdgeUser)
	}
	if m.card != nil {
		edges = append(edges, cardschedule.EdgeCard)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CardScheduleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cardschedule.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case cardschedule.EdgeCard:
		if id := m.card; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CardScheduleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CardScheduleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CardScheduleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, cardschedule.EdgeUser)
	}
	if m.clearedcard {
		edges = append(edges, cardschedule.EdgeCard)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CardScheduleMutation) EdgeCleared(name string) bool {
	switch name {
	case cardschedule.EdgeUser:
		return m.cleareduser
	case cardschedule.EdgeCard:
		return m.clearedcard
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CardScheduleMutation) ClearEdge(name string) error {
	switch name {
	case cardschedule.EdgeUser:
		m.ClearUser()
		return nil
	case cardschedule.EdgeCard:
		m.ClearCard()
		return nil
	}
	return fmt.Errorf("unknown CardSchedule unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CardScheduleMutation) ResetEdge(name string) error {
	switch name {
	case cardschedule.EdgeUser:
		m.ResetUser()
		return nil
	case cardschedule.EdgeCard:
		m.ResetCard()
		return nil
	}
	return fmt.Errorf("unknown CardSchedule edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	create_time           *time.Time
	update_time           *time.Time
	email                 *string
	firebaseUid           *string
	clearedFields         map[string]struct{}
	cardLogs              map[int]struct{}
	removedcardLogs       map[int]struct{}
	clearedcardLogs       bool
	_CardSchedules        map[int]struct{}
	removed_CardSchedules map[int]struct{}
	cleared_CardSchedules bool
	_Settings             map[int]struct{}
	removed_Settings      map[int]struct{}
	cleared_Settings      bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the create_time field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the create_time value in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old create_time value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime reset all changes of the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the update_time field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the update_time value in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old update_time value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime reset all changes of the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of email.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the field email was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetFirebaseUid sets the firebaseUid field.
func (m *UserMutation) SetFirebaseUid(s string) {
	m.firebaseUid = &s
}

// FirebaseUid returns the firebaseUid value in the mutation.
func (m *UserMutation) FirebaseUid() (r string, exists bool) {
	v := m.firebaseUid
	if v == nil {
		return
	}
	return *v, true
}

// OldFirebaseUid returns the old firebaseUid value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldFirebaseUid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFirebaseUid is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFirebaseUid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirebaseUid: %w", err)
	}
	return oldValue.FirebaseUid, nil
}

// ResetFirebaseUid reset all changes of the "firebaseUid" field.
func (m *UserMutation) ResetFirebaseUid() {
	m.firebaseUid = nil
}

// AddCardLogIDs adds the cardLogs edge to CardLog by ids.
func (m *UserMutation) AddCardLogIDs(ids ...int) {
	if m.cardLogs == nil {
		m.cardLogs = make(map[int]struct{})
	}
	for i := range ids {
		m.cardLogs[ids[i]] = struct{}{}
	}
}

// ClearCardLogs clears the cardLogs edge to CardLog.
func (m *UserMutation) ClearCardLogs() {
	m.clearedcardLogs = true
}

// CardLogsCleared returns if the edge cardLogs was cleared.
func (m *UserMutation) CardLogsCleared() bool {
	return m.clearedcardLogs
}

// RemoveCardLogIDs removes the cardLogs edge to CardLog by ids.
func (m *UserMutation) RemoveCardLogIDs(ids ...int) {
	if m.removedcardLogs == nil {
		m.removedcardLogs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcardLogs[ids[i]] = struct{}{}
	}
}

// RemovedCardLogs returns the removed ids of cardLogs.
func (m *UserMutation) RemovedCardLogsIDs() (ids []int) {
	for id := range m.removedcardLogs {
		ids = append(ids, id)
	}
	return
}

// CardLogsIDs returns the cardLogs ids in the mutation.
func (m *UserMutation) CardLogsIDs() (ids []int) {
	for id := range m.cardLogs {
		ids = append(ids, id)
	}
	return
}

// ResetCardLogs reset all changes of the "cardLogs" edge.
func (m *UserMutation) ResetCardLogs() {
	m.cardLogs = nil
	m.clearedcardLogs = false
	m.removedcardLogs = nil
}

// AddCardScheduleIDs adds the CardSchedules edge to CardSchedule by ids.
func (m *UserMutation) AddCardScheduleIDs(ids ...int) {
	if m._CardSchedules == nil {
		m._CardSchedules = make(map[int]struct{})
	}
	for i := range ids {
		m._CardSchedules[ids[i]] = struct{}{}
	}
}

// ClearCardSchedules clears the CardSchedules edge to CardSchedule.
func (m *UserMutation) ClearCardSchedules() {
	m.cleared_CardSchedules = true
}

// CardSchedulesCleared returns if the edge CardSchedules was cleared.
func (m *UserMutation) CardSchedulesCleared() bool {
	return m.cleared_CardSchedules
}

// RemoveCardScheduleIDs removes the CardSchedules edge to CardSchedule by ids.
func (m *UserMutation) RemoveCardScheduleIDs(ids ...int) {
	if m.removed_CardSchedules == nil {
		m.removed_CardSchedules = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_CardSchedules[ids[i]] = struct{}{}
	}
}

// RemovedCardSchedules returns the removed ids of CardSchedules.
func (m *UserMutation) RemovedCardSchedulesIDs() (ids []int) {
	for id := range m.removed_CardSchedules {
		ids = append(ids, id)
	}
	return
}

// CardSchedulesIDs returns the CardSchedules ids in the mutation.
func (m *UserMutation) CardSchedulesIDs() (ids []int) {
	for id := range m._CardSchedules {
		ids = append(ids, id)
	}
	return
}

// ResetCardSchedules reset all changes of the "CardSchedules" edge.
func (m *UserMutation) ResetCardSchedules() {
	m._CardSchedules = nil
	m.cleared_CardSchedules = false
	m.removed_CardSchedules = nil
}

// AddSettingIDs adds the Settings edge to UserSettings by ids.
func (m *UserMutation) AddSettingIDs(ids ...int) {
	if m._Settings == nil {
		m._Settings = make(map[int]struct{})
	}
	for i := range ids {
		m._Settings[ids[i]] = struct{}{}
	}
}

// ClearSettings clears the Settings edge to UserSettings.
func (m *UserMutation) ClearSettings() {
	m.cleared_Settings = true
}

// SettingsCleared returns if the edge Settings was cleared.
func (m *UserMutation) SettingsCleared() bool {
	return m.cleared_Settings
}

// RemoveSettingIDs removes the Settings edge to UserSettings by ids.
func (m *UserMutation) RemoveSettingIDs(ids ...int) {
	if m.removed_Settings == nil {
		m.removed_Settings = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Settings[ids[i]] = struct{}{}
	}
}

// RemovedSettings returns the removed ids of Settings.
func (m *UserMutation) RemovedSettingsIDs() (ids []int) {
	for id := range m.removed_Settings {
		ids = append(ids, id)
	}
	return
}

// SettingsIDs returns the Settings ids in the mutation.
func (m *UserMutation) SettingsIDs() (ids []int) {
	for id := range m._Settings {
		ids = append(ids, id)
	}
	return
}

// ResetSettings reset all changes of the "Settings" edge.
func (m *UserMutation) ResetSettings() {
	m._Settings = nil
	m.cleared_Settings = false
	m.removed_Settings = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.firebaseUid != nil {
		fields = append(fields, user.FieldFirebaseUid)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldEmail:
		return m.Email()
	case user.FieldFirebaseUid:
		return m.FirebaseUid()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldFirebaseUid:
		return m.OldFirebaseUid(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldFirebaseUid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirebaseUid(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldFirebaseUid:
		m.ResetFirebaseUid()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cardLogs != nil {
		edges = append(edges, user.EdgeCardLogs)
	}
	if m._CardSchedules != nil {
		edges = append(edges, user.EdgeCardSchedules)
	}
	if m._Settings != nil {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCardLogs:
		ids := make([]ent.Value, 0, len(m.cardLogs))
		for id := range m.cardLogs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCardSchedules:
		ids := make([]ent.Value, 0, len(m._CardSchedules))
		for id := range m._CardSchedules {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSettings:
		ids := make([]ent.Value, 0, len(m._Settings))
		for id := range m._Settings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcardLogs != nil {
		edges = append(edges, user.EdgeCardLogs)
	}
	if m.removed_CardSchedules != nil {
		edges = append(edges, user.EdgeCardSchedules)
	}
	if m.removed_Settings != nil {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCardLogs:
		ids := make([]ent.Value, 0, len(m.removedcardLogs))
		for id := range m.removedcardLogs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCardSchedules:
		ids := make([]ent.Value, 0, len(m.removed_CardSchedules))
		for id := range m.removed_CardSchedules {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSettings:
		ids := make([]ent.Value, 0, len(m.removed_Settings))
		for id := range m.removed_Settings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcardLogs {
		edges = append(edges, user.EdgeCardLogs)
	}
	if m.cleared_CardSchedules {
		edges = append(edges, user.EdgeCardSchedules)
	}
	if m.cleared_Settings {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCardLogs:
		return m.clearedcardLogs
	case user.EdgeCardSchedules:
		return m.cleared_CardSchedules
	case user.EdgeSettings:
		return m.cleared_Settings
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCardLogs:
		m.ResetCardLogs()
		return nil
	case user.EdgeCardSchedules:
		m.ResetCardSchedules()
		return nil
	case user.EdgeSettings:
		m.ResetSettings()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserSettingsMutation represents an operation that mutate the UserSettingsSlice
// nodes in the graph.
type UserSettingsMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	update_time       *time.Time
	newCardsPerDay    *int
	addnewCardsPerDay *int
	clearedFields     map[string]struct{}
	user              *int
	cleareduser       bool
	done              bool
	oldValue          func(context.Context) (*UserSettings, error)
	predicates        []predicate.UserSettings
}

var _ ent.Mutation = (*UserSettingsMutation)(nil)

// usersettingsOption allows to manage the mutation configuration using functional options.
type usersettingsOption func(*UserSettingsMutation)

// newUserSettingsMutation creates new mutation for $n.Name.
func newUserSettingsMutation(c config, op Op, opts ...usersettingsOption) *UserSettingsMutation {
	m := &UserSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSettingsID sets the id field of the mutation.
func withUserSettingsID(id int) usersettingsOption {
	return func(m *UserSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSettings
		)
		m.oldValue = func(ctx context.Context) (*UserSettings, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSettings sets the old UserSettings of the mutation.
func withUserSettings(node *UserSettings) usersettingsOption {
	return func(m *UserSettingsMutation) {
		m.oldValue = func(context.Context) (*UserSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserSettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the create_time field.
func (m *UserSettingsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the create_time value in the mutation.
func (m *UserSettingsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old create_time value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime reset all changes of the "create_time" field.
func (m *UserSettingsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the update_time field.
func (m *UserSettingsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the update_time value in the mutation.
func (m *UserSettingsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old update_time value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime reset all changes of the "update_time" field.
func (m *UserSettingsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetNewCardsPerDay sets the newCardsPerDay field.
func (m *UserSettingsMutation) SetNewCardsPerDay(i int) {
	m.newCardsPerDay = &i
	m.addnewCardsPerDay = nil
}

// NewCardsPerDay returns the newCardsPerDay value in the mutation.
func (m *UserSettingsMutation) NewCardsPerDay() (r int, exists bool) {
	v := m.newCardsPerDay
	if v == nil {
		return
	}
	return *v, true
}

// OldNewCardsPerDay returns the old newCardsPerDay value of the UserSettings.
// If the UserSettings object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserSettingsMutation) OldNewCardsPerDay(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNewCardsPerDay is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNewCardsPerDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNewCardsPerDay: %w", err)
	}
	return oldValue.NewCardsPerDay, nil
}

// AddNewCardsPerDay adds i to newCardsPerDay.
func (m *UserSettingsMutation) AddNewCardsPerDay(i int) {
	if m.addnewCardsPerDay != nil {
		*m.addnewCardsPerDay += i
	} else {
		m.addnewCardsPerDay = &i
	}
}

// AddedNewCardsPerDay returns the value that was added to the newCardsPerDay field in this mutation.
func (m *UserSettingsMutation) AddedNewCardsPerDay() (r int, exists bool) {
	v := m.addnewCardsPerDay
	if v == nil {
		return
	}
	return *v, true
}

// ResetNewCardsPerDay reset all changes of the "newCardsPerDay" field.
func (m *UserSettingsMutation) ResetNewCardsPerDay() {
	m.newCardsPerDay = nil
	m.addnewCardsPerDay = nil
}

// SetUserID sets the user edge to User by id.
func (m *UserSettingsMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *UserSettingsMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *UserSettingsMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *UserSettingsMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserSettingsMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *UserSettingsMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *UserSettingsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserSettings).
func (m *UserSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserSettingsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, usersettings.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, usersettings.FieldUpdateTime)
	}
	if m.newCardsPerDay != nil {
		fields = append(fields, usersettings.FieldNewCardsPerDay)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersettings.FieldCreateTime:
		return m.CreateTime()
	case usersettings.FieldUpdateTime:
		return m.UpdateTime()
	case usersettings.FieldNewCardsPerDay:
		return m.NewCardsPerDay()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersettings.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case usersettings.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case usersettings.FieldNewCardsPerDay:
		return m.OldNewCardsPerDay(ctx)
	}
	return nil, fmt.Errorf("unknown UserSettings field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersettings.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case usersettings.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case usersettings.FieldNewCardsPerDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNewCardsPerDay(v)
		return nil
	}
	return fmt.Errorf("unknown UserSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserSettingsMutation) AddedFields() []string {
	var fields []string
	if m.addnewCardsPerDay != nil {
		fields = append(fields, usersettings.FieldNewCardsPerDay)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserSettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usersettings.FieldNewCardsPerDay:
		return m.AddedNewCardsPerDay()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usersettings.FieldNewCardsPerDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNewCardsPerDay(v)
		return nil
	}
	return fmt.Errorf("unknown UserSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserSettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserSettingsMutation) ResetField(name string) error {
	switch name {
	case usersettings.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case usersettings.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case usersettings.FieldNewCardsPerDay:
		m.ResetNewCardsPerDay()
		return nil
	}
	return fmt.Errorf("unknown UserSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, usersettings.EdgeUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserSettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usersettings.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserSettingsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, usersettings.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserSettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case usersettings.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserSettingsMutation) ClearEdge(name string) error {
	switch name {
	case usersettings.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserSettings unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserSettingsMutation) ResetEdge(name string) error {
	switch name {
	case usersettings.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserSettings edge %s", name)
}

// WordMutation represents an operation that mutate the Words
// nodes in the graph.
type WordMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	create_time          *time.Time
	update_time          *time.Time
	lang1                *string
	lang2                *string
	word1                *string
	word2                *string
	clearedFields        map[string]struct{}
	cardLogs             map[int]struct{}
	removedcardLogs      map[int]struct{}
	clearedcardLogs      bool
	cardSchedules        map[int]struct{}
	removedcardSchedules map[int]struct{}
	clearedcardSchedules bool
	done                 bool
	oldValue             func(context.Context) (*Word, error)
	predicates           []predicate.Word
}

var _ ent.Mutation = (*WordMutation)(nil)

// wordOption allows to manage the mutation configuration using functional options.
type wordOption func(*WordMutation)

// newWordMutation creates new mutation for $n.Name.
func newWordMutation(c config, op Op, opts ...wordOption) *WordMutation {
	m := &WordMutation{
		config:        c,
		op:            op,
		typ:           TypeWord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWordID sets the id field of the mutation.
func withWordID(id int) wordOption {
	return func(m *WordMutation) {
		var (
			err   error
			once  sync.Once
			value *Word
		)
		m.oldValue = func(ctx context.Context) (*Word, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Word.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWord sets the old Word of the mutation.
func withWord(node *Word) wordOption {
	return func(m *WordMutation) {
		m.oldValue = func(context.Context) (*Word, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *WordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the create_time field.
func (m *WordMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the create_time value in the mutation.
func (m *WordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old create_time value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime reset all changes of the "create_time" field.
func (m *WordMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the update_time field.
func (m *WordMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the update_time value in the mutation.
func (m *WordMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old update_time value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime reset all changes of the "update_time" field.
func (m *WordMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetLang1 sets the lang1 field.
func (m *WordMutation) SetLang1(s string) {
	m.lang1 = &s
}

// Lang1 returns the lang1 value in the mutation.
func (m *WordMutation) Lang1() (r string, exists bool) {
	v := m.lang1
	if v == nil {
		return
	}
	return *v, true
}

// OldLang1 returns the old lang1 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldLang1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLang1 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLang1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang1: %w", err)
	}
	return oldValue.Lang1, nil
}

// ResetLang1 reset all changes of the "lang1" field.
func (m *WordMutation) ResetLang1() {
	m.lang1 = nil
}

// SetLang2 sets the lang2 field.
func (m *WordMutation) SetLang2(s string) {
	m.lang2 = &s
}

// Lang2 returns the lang2 value in the mutation.
func (m *WordMutation) Lang2() (r string, exists bool) {
	v := m.lang2
	if v == nil {
		return
	}
	return *v, true
}

// OldLang2 returns the old lang2 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldLang2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLang2 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLang2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang2: %w", err)
	}
	return oldValue.Lang2, nil
}

// ResetLang2 reset all changes of the "lang2" field.
func (m *WordMutation) ResetLang2() {
	m.lang2 = nil
}

// SetWord1 sets the word1 field.
func (m *WordMutation) SetWord1(s string) {
	m.word1 = &s
}

// Word1 returns the word1 value in the mutation.
func (m *WordMutation) Word1() (r string, exists bool) {
	v := m.word1
	if v == nil {
		return
	}
	return *v, true
}

// OldWord1 returns the old word1 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldWord1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWord1 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWord1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord1: %w", err)
	}
	return oldValue.Word1, nil
}

// ResetWord1 reset all changes of the "word1" field.
func (m *WordMutation) ResetWord1() {
	m.word1 = nil
}

// SetWord2 sets the word2 field.
func (m *WordMutation) SetWord2(s string) {
	m.word2 = &s
}

// Word2 returns the word2 value in the mutation.
func (m *WordMutation) Word2() (r string, exists bool) {
	v := m.word2
	if v == nil {
		return
	}
	return *v, true
}

// OldWord2 returns the old word2 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldWord2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWord2 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWord2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord2: %w", err)
	}
	return oldValue.Word2, nil
}

// ResetWord2 reset all changes of the "word2" field.
func (m *WordMutation) ResetWord2() {
	m.word2 = nil
}

// AddCardLogIDs adds the cardLogs edge to CardLog by ids.
func (m *WordMutation) AddCardLogIDs(ids ...int) {
	if m.cardLogs == nil {
		m.cardLogs = make(map[int]struct{})
	}
	for i := range ids {
		m.cardLogs[ids[i]] = struct{}{}
	}
}

// ClearCardLogs clears the cardLogs edge to CardLog.
func (m *WordMutation) ClearCardLogs() {
	m.clearedcardLogs = true
}

// CardLogsCleared returns if the edge cardLogs was cleared.
func (m *WordMutation) CardLogsCleared() bool {
	return m.clearedcardLogs
}

// RemoveCardLogIDs removes the cardLogs edge to CardLog by ids.
func (m *WordMutation) RemoveCardLogIDs(ids ...int) {
	if m.removedcardLogs == nil {
		m.removedcardLogs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcardLogs[ids[i]] = struct{}{}
	}
}

// RemovedCardLogs returns the removed ids of cardLogs.
func (m *WordMutation) RemovedCardLogsIDs() (ids []int) {
	for id := range m.removedcardLogs {
		ids = append(ids, id)
	}
	return
}

// CardLogsIDs returns the cardLogs ids in the mutation.
func (m *WordMutation) CardLogsIDs() (ids []int) {
	for id := range m.cardLogs {
		ids = append(ids, id)
	}
	return
}

// ResetCardLogs reset all changes of the "cardLogs" edge.
func (m *WordMutation) ResetCardLogs() {
	m.cardLogs = nil
	m.clearedcardLogs = false
	m.removedcardLogs = nil
}

// AddCardScheduleIDs adds the cardSchedules edge to CardSchedule by ids.
func (m *WordMutation) AddCardScheduleIDs(ids ...int) {
	if m.cardSchedules == nil {
		m.cardSchedules = make(map[int]struct{})
	}
	for i := range ids {
		m.cardSchedules[ids[i]] = struct{}{}
	}
}

// ClearCardSchedules clears the cardSchedules edge to CardSchedule.
func (m *WordMutation) ClearCardSchedules() {
	m.clearedcardSchedules = true
}

// CardSchedulesCleared returns if the edge cardSchedules was cleared.
func (m *WordMutation) CardSchedulesCleared() bool {
	return m.clearedcardSchedules
}

// RemoveCardScheduleIDs removes the cardSchedules edge to CardSchedule by ids.
func (m *WordMutation) RemoveCardScheduleIDs(ids ...int) {
	if m.removedcardSchedules == nil {
		m.removedcardSchedules = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcardSchedules[ids[i]] = struct{}{}
	}
}

// RemovedCardSchedules returns the removed ids of cardSchedules.
func (m *WordMutation) RemovedCardSchedulesIDs() (ids []int) {
	for id := range m.removedcardSchedules {
		ids = append(ids, id)
	}
	return
}

// CardSchedulesIDs returns the cardSchedules ids in the mutation.
func (m *WordMutation) CardSchedulesIDs() (ids []int) {
	for id := range m.cardSchedules {
		ids = append(ids, id)
	}
	return
}

// ResetCardSchedules reset all changes of the "cardSchedules" edge.
func (m *WordMutation) ResetCardSchedules() {
	m.cardSchedules = nil
	m.clearedcardSchedules = false
	m.removedcardSchedules = nil
}

// Op returns the operation name.
func (m *WordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Word).
func (m *WordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *WordMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, word.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, word.FieldUpdateTime)
	}
	if m.lang1 != nil {
		fields = append(fields, word.FieldLang1)
	}
	if m.lang2 != nil {
		fields = append(fields, word.FieldLang2)
	}
	if m.word1 != nil {
		fields = append(fields, word.FieldWord1)
	}
	if m.word2 != nil {
		fields = append(fields, word.FieldWord2)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *WordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case word.FieldCreateTime:
		return m.CreateTime()
	case word.FieldUpdateTime:
		return m.UpdateTime()
	case word.FieldLang1:
		return m.Lang1()
	case word.FieldLang2:
		return m.Lang2()
	case word.FieldWord1:
		return m.Word1()
	case word.FieldWord2:
		return m.Word2()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *WordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case word.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case word.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case word.FieldLang1:
		return m.OldLang1(ctx)
	case word.FieldLang2:
		return m.OldLang2(ctx)
	case word.FieldWord1:
		return m.OldWord1(ctx)
	case word.FieldWord2:
		return m.OldWord2(ctx)
	}
	return nil, fmt.Errorf("unknown Word field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *WordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case word.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case word.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case word.FieldLang1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang1(v)
		return nil
	case word.FieldLang2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang2(v)
		return nil
	case word.FieldWord1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord1(v)
		return nil
	case word.FieldWord2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord2(v)
		return nil
	}
	return fmt.Errorf("unknown Word field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *WordMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *WordMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *WordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Word numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *WordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *WordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *WordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Word nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *WordMutation) ResetField(name string) error {
	switch name {
	case word.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case word.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case word.FieldLang1:
		m.ResetLang1()
		return nil
	case word.FieldLang2:
		m.ResetLang2()
		return nil
	case word.FieldWord1:
		m.ResetWord1()
		return nil
	case word.FieldWord2:
		m.ResetWord2()
		return nil
	}
	return fmt.Errorf("unknown Word field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *WordMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cardLogs != nil {
		edges = append(edges, word.EdgeCardLogs)
	}
	if m.cardSchedules != nil {
		edges = append(edges, word.EdgeCardSchedules)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *WordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case word.EdgeCardLogs:
		ids := make([]ent.Value, 0, len(m.cardLogs))
		for id := range m.cardLogs {
			ids = append(ids, id)
		}
		return ids
	case word.EdgeCardSchedules:
		ids := make([]ent.Value, 0, len(m.cardSchedules))
		for id := range m.cardSchedules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *WordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcardLogs != nil {
		edges = append(edges, word.EdgeCardLogs)
	}
	if m.removedcardSchedules != nil {
		edges = append(edges, word.EdgeCardSchedules)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *WordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case word.EdgeCardLogs:
		ids := make([]ent.Value, 0, len(m.removedcardLogs))
		for id := range m.removedcardLogs {
			ids = append(ids, id)
		}
		return ids
	case word.EdgeCardSchedules:
		ids := make([]ent.Value, 0, len(m.removedcardSchedules))
		for id := range m.removedcardSchedules {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *WordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcardLogs {
		edges = append(edges, word.EdgeCardLogs)
	}
	if m.clearedcardSchedules {
		edges = append(edges, word.EdgeCardSchedules)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *WordMutation) EdgeCleared(name string) bool {
	switch name {
	case word.EdgeCardLogs:
		return m.clearedcardLogs
	case word.EdgeCardSchedules:
		return m.clearedcardSchedules
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *WordMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Word unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *WordMutation) ResetEdge(name string) error {
	switch name {
	case word.EdgeCardLogs:
		m.ResetCardLogs()
		return nil
	case word.EdgeCardSchedules:
		m.ResetCardSchedules()
		return nil
	}
	return fmt.Errorf("unknown Word edge %s", name)
}
