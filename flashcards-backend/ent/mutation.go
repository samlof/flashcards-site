// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"flashcards-backend/ent/word"
	"fmt"
	"sync"
	"time"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeWord = "Word"
)

// WordMutation represents an operation that mutate the Words
// nodes in the graph.
type WordMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	lang1         *string
	lang2         *string
	word1         *string
	word2         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Word, error)
}

var _ ent.Mutation = (*WordMutation)(nil)

// wordOption allows to manage the mutation configuration using functional options.
type wordOption func(*WordMutation)

// newWordMutation creates new mutation for $n.Name.
func newWordMutation(c config, op Op, opts ...wordOption) *WordMutation {
	m := &WordMutation{
		config:        c,
		op:            op,
		typ:           TypeWord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWordID sets the id field of the mutation.
func withWordID(id int) wordOption {
	return func(m *WordMutation) {
		var (
			err   error
			once  sync.Once
			value *Word
		)
		m.oldValue = func(ctx context.Context) (*Word, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Word.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWord sets the old Word of the mutation.
func withWord(node *Word) wordOption {
	return func(m *WordMutation) {
		m.oldValue = func(context.Context) (*Word, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *WordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the create_time field.
func (m *WordMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the create_time value in the mutation.
func (m *WordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old create_time value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime reset all changes of the "create_time" field.
func (m *WordMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the update_time field.
func (m *WordMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the update_time value in the mutation.
func (m *WordMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old update_time value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime reset all changes of the "update_time" field.
func (m *WordMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetLang1 sets the lang1 field.
func (m *WordMutation) SetLang1(s string) {
	m.lang1 = &s
}

// Lang1 returns the lang1 value in the mutation.
func (m *WordMutation) Lang1() (r string, exists bool) {
	v := m.lang1
	if v == nil {
		return
	}
	return *v, true
}

// OldLang1 returns the old lang1 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldLang1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLang1 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLang1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang1: %w", err)
	}
	return oldValue.Lang1, nil
}

// ResetLang1 reset all changes of the "lang1" field.
func (m *WordMutation) ResetLang1() {
	m.lang1 = nil
}

// SetLang2 sets the lang2 field.
func (m *WordMutation) SetLang2(s string) {
	m.lang2 = &s
}

// Lang2 returns the lang2 value in the mutation.
func (m *WordMutation) Lang2() (r string, exists bool) {
	v := m.lang2
	if v == nil {
		return
	}
	return *v, true
}

// OldLang2 returns the old lang2 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldLang2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLang2 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLang2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang2: %w", err)
	}
	return oldValue.Lang2, nil
}

// ResetLang2 reset all changes of the "lang2" field.
func (m *WordMutation) ResetLang2() {
	m.lang2 = nil
}

// SetWord1 sets the word1 field.
func (m *WordMutation) SetWord1(s string) {
	m.word1 = &s
}

// Word1 returns the word1 value in the mutation.
func (m *WordMutation) Word1() (r string, exists bool) {
	v := m.word1
	if v == nil {
		return
	}
	return *v, true
}

// OldWord1 returns the old word1 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldWord1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWord1 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWord1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord1: %w", err)
	}
	return oldValue.Word1, nil
}

// ResetWord1 reset all changes of the "word1" field.
func (m *WordMutation) ResetWord1() {
	m.word1 = nil
}

// SetWord2 sets the word2 field.
func (m *WordMutation) SetWord2(s string) {
	m.word2 = &s
}

// Word2 returns the word2 value in the mutation.
func (m *WordMutation) Word2() (r string, exists bool) {
	v := m.word2
	if v == nil {
		return
	}
	return *v, true
}

// OldWord2 returns the old word2 value of the Word.
// If the Word object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *WordMutation) OldWord2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWord2 is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWord2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord2: %w", err)
	}
	return oldValue.Word2, nil
}

// ResetWord2 reset all changes of the "word2" field.
func (m *WordMutation) ResetWord2() {
	m.word2 = nil
}

// Op returns the operation name.
func (m *WordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Word).
func (m *WordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *WordMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, word.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, word.FieldUpdateTime)
	}
	if m.lang1 != nil {
		fields = append(fields, word.FieldLang1)
	}
	if m.lang2 != nil {
		fields = append(fields, word.FieldLang2)
	}
	if m.word1 != nil {
		fields = append(fields, word.FieldWord1)
	}
	if m.word2 != nil {
		fields = append(fields, word.FieldWord2)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *WordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case word.FieldCreateTime:
		return m.CreateTime()
	case word.FieldUpdateTime:
		return m.UpdateTime()
	case word.FieldLang1:
		return m.Lang1()
	case word.FieldLang2:
		return m.Lang2()
	case word.FieldWord1:
		return m.Word1()
	case word.FieldWord2:
		return m.Word2()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *WordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case word.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case word.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case word.FieldLang1:
		return m.OldLang1(ctx)
	case word.FieldLang2:
		return m.OldLang2(ctx)
	case word.FieldWord1:
		return m.OldWord1(ctx)
	case word.FieldWord2:
		return m.OldWord2(ctx)
	}
	return nil, fmt.Errorf("unknown Word field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *WordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case word.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case word.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case word.FieldLang1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang1(v)
		return nil
	case word.FieldLang2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang2(v)
		return nil
	case word.FieldWord1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord1(v)
		return nil
	case word.FieldWord2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord2(v)
		return nil
	}
	return fmt.Errorf("unknown Word field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *WordMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *WordMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *WordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Word numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *WordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *WordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *WordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Word nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *WordMutation) ResetField(name string) error {
	switch name {
	case word.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case word.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case word.FieldLang1:
		m.ResetLang1()
		return nil
	case word.FieldLang2:
		m.ResetLang2()
		return nil
	case word.FieldWord1:
		m.ResetWord1()
		return nil
	case word.FieldWord2:
		m.ResetWord2()
		return nil
	}
	return fmt.Errorf("unknown Word field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *WordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *WordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *WordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *WordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *WordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *WordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *WordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Word unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *WordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Word edge %s", name)
}
