// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"flashcards-backend/ent/predicate"
	"flashcards-backend/ent/user"
	"flashcards-backend/ent/usersettings"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// UserSettingsUpdate is the builder for updating UserSettings entities.
type UserSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *UserSettingsMutation
}

// Where adds a new predicate for the builder.
func (usu *UserSettingsUpdate) Where(ps ...predicate.UserSettings) *UserSettingsUpdate {
	usu.mutation.predicates = append(usu.mutation.predicates, ps...)
	return usu
}

// SetNewCardsPerDay sets the newCardsPerDay field.
func (usu *UserSettingsUpdate) SetNewCardsPerDay(i int) *UserSettingsUpdate {
	usu.mutation.ResetNewCardsPerDay()
	usu.mutation.SetNewCardsPerDay(i)
	return usu
}

// SetNillableNewCardsPerDay sets the newCardsPerDay field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableNewCardsPerDay(i *int) *UserSettingsUpdate {
	if i != nil {
		usu.SetNewCardsPerDay(*i)
	}
	return usu
}

// AddNewCardsPerDay adds i to newCardsPerDay.
func (usu *UserSettingsUpdate) AddNewCardsPerDay(i int) *UserSettingsUpdate {
	usu.mutation.AddNewCardsPerDay(i)
	return usu
}

// SetUserID sets the user edge to User by id.
func (usu *UserSettingsUpdate) SetUserID(id int) *UserSettingsUpdate {
	usu.mutation.SetUserID(id)
	return usu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableUserID(id *int) *UserSettingsUpdate {
	if id != nil {
		usu = usu.SetUserID(*id)
	}
	return usu
}

// SetUser sets the user edge to User.
func (usu *UserSettingsUpdate) SetUser(u *User) *UserSettingsUpdate {
	return usu.SetUserID(u.ID)
}

// Mutation returns the UserSettingsMutation object of the builder.
func (usu *UserSettingsUpdate) Mutation() *UserSettingsMutation {
	return usu.mutation
}

// ClearUser clears the "user" edge to type User.
func (usu *UserSettingsUpdate) ClearUser() *UserSettingsUpdate {
	usu.mutation.ClearUser()
	return usu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (usu *UserSettingsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	usu.defaults()
	if len(usu.hooks) == 0 {
		affected, err = usu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			usu.mutation = mutation
			affected, err = usu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(usu.hooks) - 1; i >= 0; i-- {
			mut = usu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSettingsUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSettingsUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSettingsUpdate) defaults() {
	if _, ok := usu.mutation.UpdateTime(); !ok {
		v := usersettings.UpdateDefaultUpdateTime()
		usu.mutation.SetUpdateTime(v)
	}
}

func (usu *UserSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usersettings.Table,
			Columns: usersettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usersettings.FieldID,
			},
		},
	}
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usersettings.FieldUpdateTime,
		})
	}
	if value, ok := usu.mutation.NewCardsPerDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usersettings.FieldNewCardsPerDay,
		})
	}
	if value, ok := usu.mutation.AddedNewCardsPerDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usersettings.FieldNewCardsPerDay,
		})
	}
	if usu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersettings.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserSettingsUpdateOne is the builder for updating a single UserSettings entity.
type UserSettingsUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserSettingsMutation
}

// SetNewCardsPerDay sets the newCardsPerDay field.
func (usuo *UserSettingsUpdateOne) SetNewCardsPerDay(i int) *UserSettingsUpdateOne {
	usuo.mutation.ResetNewCardsPerDay()
	usuo.mutation.SetNewCardsPerDay(i)
	return usuo
}

// SetNillableNewCardsPerDay sets the newCardsPerDay field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableNewCardsPerDay(i *int) *UserSettingsUpdateOne {
	if i != nil {
		usuo.SetNewCardsPerDay(*i)
	}
	return usuo
}

// AddNewCardsPerDay adds i to newCardsPerDay.
func (usuo *UserSettingsUpdateOne) AddNewCardsPerDay(i int) *UserSettingsUpdateOne {
	usuo.mutation.AddNewCardsPerDay(i)
	return usuo
}

// SetUserID sets the user edge to User by id.
func (usuo *UserSettingsUpdateOne) SetUserID(id int) *UserSettingsUpdateOne {
	usuo.mutation.SetUserID(id)
	return usuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableUserID(id *int) *UserSettingsUpdateOne {
	if id != nil {
		usuo = usuo.SetUserID(*id)
	}
	return usuo
}

// SetUser sets the user edge to User.
func (usuo *UserSettingsUpdateOne) SetUser(u *User) *UserSettingsUpdateOne {
	return usuo.SetUserID(u.ID)
}

// Mutation returns the UserSettingsMutation object of the builder.
func (usuo *UserSettingsUpdateOne) Mutation() *UserSettingsMutation {
	return usuo.mutation
}

// ClearUser clears the "user" edge to type User.
func (usuo *UserSettingsUpdateOne) ClearUser() *UserSettingsUpdateOne {
	usuo.mutation.ClearUser()
	return usuo
}

// Save executes the query and returns the updated entity.
func (usuo *UserSettingsUpdateOne) Save(ctx context.Context) (*UserSettings, error) {
	var (
		err  error
		node *UserSettings
	)
	usuo.defaults()
	if len(usuo.hooks) == 0 {
		node, err = usuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			usuo.mutation = mutation
			node, err = usuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(usuo.hooks) - 1; i >= 0; i-- {
			mut = usuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSettingsUpdateOne) SaveX(ctx context.Context) *UserSettings {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSettingsUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdateTime(); !ok {
		v := usersettings.UpdateDefaultUpdateTime()
		usuo.mutation.SetUpdateTime(v)
	}
}

func (usuo *UserSettingsUpdateOne) sqlSave(ctx context.Context) (_node *UserSettings, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usersettings.Table,
			Columns: usersettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usersettings.FieldID,
			},
		},
	}
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserSettings.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := usuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usersettings.FieldUpdateTime,
		})
	}
	if value, ok := usuo.mutation.NewCardsPerDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usersettings.FieldNewCardsPerDay,
		})
	}
	if value, ok := usuo.mutation.AddedNewCardsPerDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usersettings.FieldNewCardsPerDay,
		})
	}
	if usuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSettings{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersettings.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
