// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"flashcards-backend/ent/cardstatus"
	"flashcards-backend/ent/predicate"
	"flashcards-backend/ent/word"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// WordUpdate is the builder for updating Word entities.
type WordUpdate struct {
	config
	hooks      []Hook
	mutation   *WordMutation
	predicates []predicate.Word
}

// Where adds a new predicate for the builder.
func (wu *WordUpdate) Where(ps ...predicate.Word) *WordUpdate {
	wu.predicates = append(wu.predicates, ps...)
	return wu
}

// SetLang1 sets the lang1 field.
func (wu *WordUpdate) SetLang1(s string) *WordUpdate {
	wu.mutation.SetLang1(s)
	return wu
}

// SetLang2 sets the lang2 field.
func (wu *WordUpdate) SetLang2(s string) *WordUpdate {
	wu.mutation.SetLang2(s)
	return wu
}

// SetWord1 sets the word1 field.
func (wu *WordUpdate) SetWord1(s string) *WordUpdate {
	wu.mutation.SetWord1(s)
	return wu
}

// SetWord2 sets the word2 field.
func (wu *WordUpdate) SetWord2(s string) *WordUpdate {
	wu.mutation.SetWord2(s)
	return wu
}

// AddCardStatuseIDs adds the cardStatuses edge to CardStatus by ids.
func (wu *WordUpdate) AddCardStatuseIDs(ids ...int) *WordUpdate {
	wu.mutation.AddCardStatuseIDs(ids...)
	return wu
}

// AddCardStatuses adds the cardStatuses edges to CardStatus.
func (wu *WordUpdate) AddCardStatuses(c ...*CardStatus) *WordUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wu.AddCardStatuseIDs(ids...)
}

// Mutation returns the WordMutation object of the builder.
func (wu *WordUpdate) Mutation() *WordMutation {
	return wu.mutation
}

// RemoveCardStatuseIDs removes the cardStatuses edge to CardStatus by ids.
func (wu *WordUpdate) RemoveCardStatuseIDs(ids ...int) *WordUpdate {
	wu.mutation.RemoveCardStatuseIDs(ids...)
	return wu
}

// RemoveCardStatuses removes cardStatuses edges to CardStatus.
func (wu *WordUpdate) RemoveCardStatuses(c ...*CardStatus) *WordUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wu.RemoveCardStatuseIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (wu *WordUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := wu.mutation.UpdateTime(); !ok {
		v := word.UpdateDefaultUpdateTime()
		wu.mutation.SetUpdateTime(v)
	}
	if v, ok := wu.mutation.Lang1(); ok {
		if err := word.Lang1Validator(v); err != nil {
			return 0, &ValidationError{Name: "lang1", err: fmt.Errorf("ent: validator failed for field \"lang1\": %w", err)}
		}
	}
	if v, ok := wu.mutation.Lang2(); ok {
		if err := word.Lang2Validator(v); err != nil {
			return 0, &ValidationError{Name: "lang2", err: fmt.Errorf("ent: validator failed for field \"lang2\": %w", err)}
		}
	}
	if v, ok := wu.mutation.Word1(); ok {
		if err := word.Word1Validator(v); err != nil {
			return 0, &ValidationError{Name: "word1", err: fmt.Errorf("ent: validator failed for field \"word1\": %w", err)}
		}
	}
	if v, ok := wu.mutation.Word2(); ok {
		if err := word.Word2Validator(v); err != nil {
			return 0, &ValidationError{Name: "word2", err: fmt.Errorf("ent: validator failed for field \"word2\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WordUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WordUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WordUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   word.Table,
			Columns: word.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: word.FieldID,
			},
		},
	}
	if ps := wu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: word.FieldUpdateTime,
		})
	}
	if value, ok := wu.mutation.Lang1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldLang1,
		})
	}
	if value, ok := wu.mutation.Lang2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldLang2,
		})
	}
	if value, ok := wu.mutation.Word1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldWord1,
		})
	}
	if value, ok := wu.mutation.Word2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldWord2,
		})
	}
	if nodes := wu.mutation.RemovedCardStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   word.CardStatusesTable,
			Columns: []string{word.CardStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CardStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   word.CardStatusesTable,
			Columns: []string{word.CardStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{word.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WordUpdateOne is the builder for updating a single Word entity.
type WordUpdateOne struct {
	config
	hooks    []Hook
	mutation *WordMutation
}

// SetLang1 sets the lang1 field.
func (wuo *WordUpdateOne) SetLang1(s string) *WordUpdateOne {
	wuo.mutation.SetLang1(s)
	return wuo
}

// SetLang2 sets the lang2 field.
func (wuo *WordUpdateOne) SetLang2(s string) *WordUpdateOne {
	wuo.mutation.SetLang2(s)
	return wuo
}

// SetWord1 sets the word1 field.
func (wuo *WordUpdateOne) SetWord1(s string) *WordUpdateOne {
	wuo.mutation.SetWord1(s)
	return wuo
}

// SetWord2 sets the word2 field.
func (wuo *WordUpdateOne) SetWord2(s string) *WordUpdateOne {
	wuo.mutation.SetWord2(s)
	return wuo
}

// AddCardStatuseIDs adds the cardStatuses edge to CardStatus by ids.
func (wuo *WordUpdateOne) AddCardStatuseIDs(ids ...int) *WordUpdateOne {
	wuo.mutation.AddCardStatuseIDs(ids...)
	return wuo
}

// AddCardStatuses adds the cardStatuses edges to CardStatus.
func (wuo *WordUpdateOne) AddCardStatuses(c ...*CardStatus) *WordUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wuo.AddCardStatuseIDs(ids...)
}

// Mutation returns the WordMutation object of the builder.
func (wuo *WordUpdateOne) Mutation() *WordMutation {
	return wuo.mutation
}

// RemoveCardStatuseIDs removes the cardStatuses edge to CardStatus by ids.
func (wuo *WordUpdateOne) RemoveCardStatuseIDs(ids ...int) *WordUpdateOne {
	wuo.mutation.RemoveCardStatuseIDs(ids...)
	return wuo
}

// RemoveCardStatuses removes cardStatuses edges to CardStatus.
func (wuo *WordUpdateOne) RemoveCardStatuses(c ...*CardStatus) *WordUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wuo.RemoveCardStatuseIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (wuo *WordUpdateOne) Save(ctx context.Context) (*Word, error) {
	if _, ok := wuo.mutation.UpdateTime(); !ok {
		v := word.UpdateDefaultUpdateTime()
		wuo.mutation.SetUpdateTime(v)
	}
	if v, ok := wuo.mutation.Lang1(); ok {
		if err := word.Lang1Validator(v); err != nil {
			return nil, &ValidationError{Name: "lang1", err: fmt.Errorf("ent: validator failed for field \"lang1\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.Lang2(); ok {
		if err := word.Lang2Validator(v); err != nil {
			return nil, &ValidationError{Name: "lang2", err: fmt.Errorf("ent: validator failed for field \"lang2\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.Word1(); ok {
		if err := word.Word1Validator(v); err != nil {
			return nil, &ValidationError{Name: "word1", err: fmt.Errorf("ent: validator failed for field \"word1\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.Word2(); ok {
		if err := word.Word2Validator(v); err != nil {
			return nil, &ValidationError{Name: "word2", err: fmt.Errorf("ent: validator failed for field \"word2\": %w", err)}
		}
	}

	var (
		err  error
		node *Word
	)
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WordUpdateOne) SaveX(ctx context.Context) *Word {
	w, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return w
}

// Exec executes the query on the entity.
func (wuo *WordUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WordUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WordUpdateOne) sqlSave(ctx context.Context) (w *Word, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   word.Table,
			Columns: word.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: word.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Word.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := wuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: word.FieldUpdateTime,
		})
	}
	if value, ok := wuo.mutation.Lang1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldLang1,
		})
	}
	if value, ok := wuo.mutation.Lang2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldLang2,
		})
	}
	if value, ok := wuo.mutation.Word1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldWord1,
		})
	}
	if value, ok := wuo.mutation.Word2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldWord2,
		})
	}
	if nodes := wuo.mutation.RemovedCardStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   word.CardStatusesTable,
			Columns: []string{word.CardStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CardStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   word.CardStatusesTable,
			Columns: []string{word.CardStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cardstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	w = &Word{config: wuo.config}
	_spec.Assign = w.assignValues
	_spec.ScanValues = w.scanValues()
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{word.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return w, nil
}
