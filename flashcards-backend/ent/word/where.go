// Code generated by entc, DO NOT EDIT.

package word

import (
	"flashcards-backend/ent/predicate"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Lang1 applies equality check predicate on the "lang1" field. It's identical to Lang1EQ.
func Lang1(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLang1), v))
	})
}

// Lang2 applies equality check predicate on the "lang2" field. It's identical to Lang2EQ.
func Lang2(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLang2), v))
	})
}

// Word1 applies equality check predicate on the "word1" field. It's identical to Word1EQ.
func Word1(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord1), v))
	})
}

// Word2 applies equality check predicate on the "word2" field. It's identical to Word2EQ.
func Word2(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord2), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// Lang1EQ applies the EQ predicate on the "lang1" field.
func Lang1EQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLang1), v))
	})
}

// Lang1NEQ applies the NEQ predicate on the "lang1" field.
func Lang1NEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLang1), v))
	})
}

// Lang1In applies the In predicate on the "lang1" field.
func Lang1In(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLang1), v...))
	})
}

// Lang1NotIn applies the NotIn predicate on the "lang1" field.
func Lang1NotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLang1), v...))
	})
}

// Lang1GT applies the GT predicate on the "lang1" field.
func Lang1GT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLang1), v))
	})
}

// Lang1GTE applies the GTE predicate on the "lang1" field.
func Lang1GTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLang1), v))
	})
}

// Lang1LT applies the LT predicate on the "lang1" field.
func Lang1LT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLang1), v))
	})
}

// Lang1LTE applies the LTE predicate on the "lang1" field.
func Lang1LTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLang1), v))
	})
}

// Lang1Contains applies the Contains predicate on the "lang1" field.
func Lang1Contains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLang1), v))
	})
}

// Lang1HasPrefix applies the HasPrefix predicate on the "lang1" field.
func Lang1HasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLang1), v))
	})
}

// Lang1HasSuffix applies the HasSuffix predicate on the "lang1" field.
func Lang1HasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLang1), v))
	})
}

// Lang1EqualFold applies the EqualFold predicate on the "lang1" field.
func Lang1EqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLang1), v))
	})
}

// Lang1ContainsFold applies the ContainsFold predicate on the "lang1" field.
func Lang1ContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLang1), v))
	})
}

// Lang2EQ applies the EQ predicate on the "lang2" field.
func Lang2EQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLang2), v))
	})
}

// Lang2NEQ applies the NEQ predicate on the "lang2" field.
func Lang2NEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLang2), v))
	})
}

// Lang2In applies the In predicate on the "lang2" field.
func Lang2In(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLang2), v...))
	})
}

// Lang2NotIn applies the NotIn predicate on the "lang2" field.
func Lang2NotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLang2), v...))
	})
}

// Lang2GT applies the GT predicate on the "lang2" field.
func Lang2GT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLang2), v))
	})
}

// Lang2GTE applies the GTE predicate on the "lang2" field.
func Lang2GTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLang2), v))
	})
}

// Lang2LT applies the LT predicate on the "lang2" field.
func Lang2LT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLang2), v))
	})
}

// Lang2LTE applies the LTE predicate on the "lang2" field.
func Lang2LTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLang2), v))
	})
}

// Lang2Contains applies the Contains predicate on the "lang2" field.
func Lang2Contains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLang2), v))
	})
}

// Lang2HasPrefix applies the HasPrefix predicate on the "lang2" field.
func Lang2HasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLang2), v))
	})
}

// Lang2HasSuffix applies the HasSuffix predicate on the "lang2" field.
func Lang2HasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLang2), v))
	})
}

// Lang2EqualFold applies the EqualFold predicate on the "lang2" field.
func Lang2EqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLang2), v))
	})
}

// Lang2ContainsFold applies the ContainsFold predicate on the "lang2" field.
func Lang2ContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLang2), v))
	})
}

// Word1EQ applies the EQ predicate on the "word1" field.
func Word1EQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord1), v))
	})
}

// Word1NEQ applies the NEQ predicate on the "word1" field.
func Word1NEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWord1), v))
	})
}

// Word1In applies the In predicate on the "word1" field.
func Word1In(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWord1), v...))
	})
}

// Word1NotIn applies the NotIn predicate on the "word1" field.
func Word1NotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWord1), v...))
	})
}

// Word1GT applies the GT predicate on the "word1" field.
func Word1GT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWord1), v))
	})
}

// Word1GTE applies the GTE predicate on the "word1" field.
func Word1GTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWord1), v))
	})
}

// Word1LT applies the LT predicate on the "word1" field.
func Word1LT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWord1), v))
	})
}

// Word1LTE applies the LTE predicate on the "word1" field.
func Word1LTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWord1), v))
	})
}

// Word1Contains applies the Contains predicate on the "word1" field.
func Word1Contains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWord1), v))
	})
}

// Word1HasPrefix applies the HasPrefix predicate on the "word1" field.
func Word1HasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWord1), v))
	})
}

// Word1HasSuffix applies the HasSuffix predicate on the "word1" field.
func Word1HasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWord1), v))
	})
}

// Word1EqualFold applies the EqualFold predicate on the "word1" field.
func Word1EqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWord1), v))
	})
}

// Word1ContainsFold applies the ContainsFold predicate on the "word1" field.
func Word1ContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWord1), v))
	})
}

// Word2EQ applies the EQ predicate on the "word2" field.
func Word2EQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord2), v))
	})
}

// Word2NEQ applies the NEQ predicate on the "word2" field.
func Word2NEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWord2), v))
	})
}

// Word2In applies the In predicate on the "word2" field.
func Word2In(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWord2), v...))
	})
}

// Word2NotIn applies the NotIn predicate on the "word2" field.
func Word2NotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWord2), v...))
	})
}

// Word2GT applies the GT predicate on the "word2" field.
func Word2GT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWord2), v))
	})
}

// Word2GTE applies the GTE predicate on the "word2" field.
func Word2GTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWord2), v))
	})
}

// Word2LT applies the LT predicate on the "word2" field.
func Word2LT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWord2), v))
	})
}

// Word2LTE applies the LTE predicate on the "word2" field.
func Word2LTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWord2), v))
	})
}

// Word2Contains applies the Contains predicate on the "word2" field.
func Word2Contains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWord2), v))
	})
}

// Word2HasPrefix applies the HasPrefix predicate on the "word2" field.
func Word2HasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWord2), v))
	})
}

// Word2HasSuffix applies the HasSuffix predicate on the "word2" field.
func Word2HasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWord2), v))
	})
}

// Word2EqualFold applies the EqualFold predicate on the "word2" field.
func Word2EqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWord2), v))
	})
}

// Word2ContainsFold applies the ContainsFold predicate on the "word2" field.
func Word2ContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWord2), v))
	})
}

// HasCardLogs applies the HasEdge predicate on the "cardLogs" edge.
func HasCardLogs() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardLogsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CardLogsTable, CardLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardLogsWith applies the HasEdge predicate on the "cardLogs" edge with a given conditions (other predicates).
func HasCardLogsWith(preds ...predicate.CardLog) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardLogsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CardLogsTable, CardLogsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCardSchedules applies the HasEdge predicate on the "cardSchedules" edge.
func HasCardSchedules() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardSchedulesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CardSchedulesTable, CardSchedulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardSchedulesWith applies the HasEdge predicate on the "cardSchedules" edge with a given conditions (other predicates).
func HasCardSchedulesWith(preds ...predicate.CardSchedule) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardSchedulesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CardSchedulesTable, CardSchedulesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		p(s.Not())
	})
}
