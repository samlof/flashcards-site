// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flashcards-backend/ent/word"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// WordCreate is the builder for creating a Word entity.
type WordCreate struct {
	config
	mutation *WordMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (wc *WordCreate) SetCreateTime(t time.Time) *WordCreate {
	wc.mutation.SetCreateTime(t)
	return wc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (wc *WordCreate) SetNillableCreateTime(t *time.Time) *WordCreate {
	if t != nil {
		wc.SetCreateTime(*t)
	}
	return wc
}

// SetUpdateTime sets the update_time field.
func (wc *WordCreate) SetUpdateTime(t time.Time) *WordCreate {
	wc.mutation.SetUpdateTime(t)
	return wc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (wc *WordCreate) SetNillableUpdateTime(t *time.Time) *WordCreate {
	if t != nil {
		wc.SetUpdateTime(*t)
	}
	return wc
}

// SetLang1 sets the lang1 field.
func (wc *WordCreate) SetLang1(s string) *WordCreate {
	wc.mutation.SetLang1(s)
	return wc
}

// SetLang2 sets the lang2 field.
func (wc *WordCreate) SetLang2(s string) *WordCreate {
	wc.mutation.SetLang2(s)
	return wc
}

// SetWord1 sets the word1 field.
func (wc *WordCreate) SetWord1(s string) *WordCreate {
	wc.mutation.SetWord1(s)
	return wc
}

// SetWord2 sets the word2 field.
func (wc *WordCreate) SetWord2(s string) *WordCreate {
	wc.mutation.SetWord2(s)
	return wc
}

// Mutation returns the WordMutation object of the builder.
func (wc *WordCreate) Mutation() *WordMutation {
	return wc.mutation
}

// Save creates the Word in the database.
func (wc *WordCreate) Save(ctx context.Context) (*Word, error) {
	if _, ok := wc.mutation.CreateTime(); !ok {
		v := word.DefaultCreateTime()
		wc.mutation.SetCreateTime(v)
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		v := word.DefaultUpdateTime()
		wc.mutation.SetUpdateTime(v)
	}
	if _, ok := wc.mutation.Lang1(); !ok {
		return nil, &ValidationError{Name: "lang1", err: errors.New("ent: missing required field \"lang1\"")}
	}
	if v, ok := wc.mutation.Lang1(); ok {
		if err := word.Lang1Validator(v); err != nil {
			return nil, &ValidationError{Name: "lang1", err: fmt.Errorf("ent: validator failed for field \"lang1\": %w", err)}
		}
	}
	if _, ok := wc.mutation.Lang2(); !ok {
		return nil, &ValidationError{Name: "lang2", err: errors.New("ent: missing required field \"lang2\"")}
	}
	if v, ok := wc.mutation.Lang2(); ok {
		if err := word.Lang2Validator(v); err != nil {
			return nil, &ValidationError{Name: "lang2", err: fmt.Errorf("ent: validator failed for field \"lang2\": %w", err)}
		}
	}
	if _, ok := wc.mutation.Word1(); !ok {
		return nil, &ValidationError{Name: "word1", err: errors.New("ent: missing required field \"word1\"")}
	}
	if v, ok := wc.mutation.Word1(); ok {
		if err := word.Word1Validator(v); err != nil {
			return nil, &ValidationError{Name: "word1", err: fmt.Errorf("ent: validator failed for field \"word1\": %w", err)}
		}
	}
	if _, ok := wc.mutation.Word2(); !ok {
		return nil, &ValidationError{Name: "word2", err: errors.New("ent: missing required field \"word2\"")}
	}
	if v, ok := wc.mutation.Word2(); ok {
		if err := word.Word2Validator(v); err != nil {
			return nil, &ValidationError{Name: "word2", err: fmt.Errorf("ent: validator failed for field \"word2\": %w", err)}
		}
	}
	var (
		err  error
		node *Word
	)
	if len(wc.hooks) == 0 {
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WordCreate) SaveX(ctx context.Context) *Word {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wc *WordCreate) sqlSave(ctx context.Context) (*Word, error) {
	w, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	w.ID = int(id)
	return w, nil
}

func (wc *WordCreate) createSpec() (*Word, *sqlgraph.CreateSpec) {
	var (
		w     = &Word{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: word.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: word.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: word.FieldCreateTime,
		})
		w.CreateTime = value
	}
	if value, ok := wc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: word.FieldUpdateTime,
		})
		w.UpdateTime = value
	}
	if value, ok := wc.mutation.Lang1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldLang1,
		})
		w.Lang1 = value
	}
	if value, ok := wc.mutation.Lang2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldLang2,
		})
		w.Lang2 = value
	}
	if value, ok := wc.mutation.Word1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldWord1,
		})
		w.Word1 = value
	}
	if value, ok := wc.mutation.Word2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: word.FieldWord2,
		})
		w.Word2 = value
	}
	return w, _spec
}
