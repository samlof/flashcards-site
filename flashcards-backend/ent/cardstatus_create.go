// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flashcards-backend/ent/cardstatus"
	"flashcards-backend/ent/user"
	"flashcards-backend/ent/word"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CardStatusCreate is the builder for creating a CardStatus entity.
type CardStatusCreate struct {
	config
	mutation *CardStatusMutation
	hooks    []Hook
}

// SetDoneLast sets the done_last field.
func (csc *CardStatusCreate) SetDoneLast(t time.Time) *CardStatusCreate {
	csc.mutation.SetDoneLast(t)
	return csc
}

// SetUserID sets the user edge to User by id.
func (csc *CardStatusCreate) SetUserID(id int) *CardStatusCreate {
	csc.mutation.SetUserID(id)
	return csc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (csc *CardStatusCreate) SetNillableUserID(id *int) *CardStatusCreate {
	if id != nil {
		csc = csc.SetUserID(*id)
	}
	return csc
}

// SetUser sets the user edge to User.
func (csc *CardStatusCreate) SetUser(u *User) *CardStatusCreate {
	return csc.SetUserID(u.ID)
}

// SetCardID sets the card edge to Word by id.
func (csc *CardStatusCreate) SetCardID(id int) *CardStatusCreate {
	csc.mutation.SetCardID(id)
	return csc
}

// SetNillableCardID sets the card edge to Word by id if the given value is not nil.
func (csc *CardStatusCreate) SetNillableCardID(id *int) *CardStatusCreate {
	if id != nil {
		csc = csc.SetCardID(*id)
	}
	return csc
}

// SetCard sets the card edge to Word.
func (csc *CardStatusCreate) SetCard(w *Word) *CardStatusCreate {
	return csc.SetCardID(w.ID)
}

// Mutation returns the CardStatusMutation object of the builder.
func (csc *CardStatusCreate) Mutation() *CardStatusMutation {
	return csc.mutation
}

// Save creates the CardStatus in the database.
func (csc *CardStatusCreate) Save(ctx context.Context) (*CardStatus, error) {
	if _, ok := csc.mutation.DoneLast(); !ok {
		return nil, &ValidationError{Name: "done_last", err: errors.New("ent: missing required field \"done_last\"")}
	}
	var (
		err  error
		node *CardStatus
	)
	if len(csc.hooks) == 0 {
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csc.mutation = mutation
			node, err = csc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CardStatusCreate) SaveX(ctx context.Context) *CardStatus {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (csc *CardStatusCreate) sqlSave(ctx context.Context) (*CardStatus, error) {
	cs, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	cs.ID = int(id)
	return cs, nil
}

func (csc *CardStatusCreate) createSpec() (*CardStatus, *sqlgraph.CreateSpec) {
	var (
		cs    = &CardStatus{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cardstatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cardstatus.FieldID,
			},
		}
	)
	if value, ok := csc.mutation.DoneLast(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cardstatus.FieldDoneLast,
		})
		cs.DoneLast = value
	}
	if nodes := csc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cardstatus.UserTable,
			Columns: []string{cardstatus.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cardstatus.CardTable,
			Columns: []string{cardstatus.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: word.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return cs, _spec
}
