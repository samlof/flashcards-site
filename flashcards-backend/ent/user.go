// Code generated by entc, DO NOT EDIT.

package ent

import (
	"flashcards-backend/ent/user"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FirebaseUid holds the value of the "firebaseUid" field.
	FirebaseUid string `json:"firebaseUid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// CardLogs holds the value of the cardLogs edge.
	CardLogs []*CardLog
	// CardSchedules holds the value of the CardSchedules edge.
	CardSchedules []*CardSchedule
	// Settings holds the value of the Settings edge.
	Settings []*UserSettings
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CardLogsOrErr returns the CardLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CardLogsOrErr() ([]*CardLog, error) {
	if e.loadedTypes[0] {
		return e.CardLogs, nil
	}
	return nil, &NotLoadedError{edge: "cardLogs"}
}

// CardSchedulesOrErr returns the CardSchedules value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CardSchedulesOrErr() ([]*CardSchedule, error) {
	if e.loadedTypes[1] {
		return e.CardSchedules, nil
	}
	return nil, &NotLoadedError{edge: "CardSchedules"}
}

// SettingsOrErr returns the Settings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SettingsOrErr() ([]*UserSettings, error) {
	if e.loadedTypes[2] {
		return e.Settings, nil
	}
	return nil, &NotLoadedError{edge: "Settings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // email
		&sql.NullString{}, // firebaseUid
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		u.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		u.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[2])
	} else if value.Valid {
		u.Email = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field firebaseUid", values[3])
	} else if value.Valid {
		u.FirebaseUid = value.String
	}
	return nil
}

// QueryCardLogs queries the cardLogs edge of the User.
func (u *User) QueryCardLogs() *CardLogQuery {
	return (&UserClient{config: u.config}).QueryCardLogs(u)
}

// QueryCardSchedules queries the CardSchedules edge of the User.
func (u *User) QueryCardSchedules() *CardScheduleQuery {
	return (&UserClient{config: u.config}).QueryCardSchedules(u)
}

// QuerySettings queries the Settings edge of the User.
func (u *User) QuerySettings() *UserSettingsQuery {
	return (&UserClient{config: u.config}).QuerySettings(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", firebaseUid=")
	builder.WriteString(u.FirebaseUid)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
