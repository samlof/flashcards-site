// Code generated by entc, DO NOT EDIT.

package ent

import (
	"flashcards-backend/ent/cardschedule"
	"flashcards-backend/ent/user"
	"flashcards-backend/ent/word"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// CardSchedule is the model entity for the CardSchedule schema.
type CardSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ScheduledFor holds the value of the "scheduled_for" field.
	ScheduledFor time.Time `json:"scheduled_for,omitempty"`
	// Reviewed holds the value of the "reviewed" field.
	Reviewed bool `json:"reviewed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardScheduleQuery when eager-loading is set.
	Edges               CardScheduleEdges `json:"edges"`
	card_schedule_card  *int
	user_card_schedules *int
}

// CardScheduleEdges holds the relations/edges for other nodes in the graph.
type CardScheduleEdges struct {
	// User holds the value of the user edge.
	User *User
	// Card holds the value of the card edge.
	Card *Word
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardScheduleEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardScheduleEdges) CardOrErr() (*Word, error) {
	if e.loadedTypes[1] {
		if e.Card == nil {
			// The edge card was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: word.Label}
		}
		return e.Card, nil
	}
	return nil, &NotLoadedError{edge: "card"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CardSchedule) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // create_time
		&sql.NullTime{},  // update_time
		&sql.NullTime{},  // scheduled_for
		&sql.NullBool{},  // reviewed
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*CardSchedule) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // card_schedule_card
		&sql.NullInt64{}, // user_card_schedules
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CardSchedule fields.
func (cs *CardSchedule) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cardschedule.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cs.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		cs.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		cs.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field scheduled_for", values[2])
	} else if value.Valid {
		cs.ScheduledFor = value.Time
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field reviewed", values[3])
	} else if value.Valid {
		cs.Reviewed = value.Bool
	}
	values = values[4:]
	if len(values) == len(cardschedule.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field card_schedule_card", value)
		} else if value.Valid {
			cs.card_schedule_card = new(int)
			*cs.card_schedule_card = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_card_schedules", value)
		} else if value.Valid {
			cs.user_card_schedules = new(int)
			*cs.user_card_schedules = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the CardSchedule.
func (cs *CardSchedule) QueryUser() *UserQuery {
	return (&CardScheduleClient{config: cs.config}).QueryUser(cs)
}

// QueryCard queries the card edge of the CardSchedule.
func (cs *CardSchedule) QueryCard() *WordQuery {
	return (&CardScheduleClient{config: cs.config}).QueryCard(cs)
}

// Update returns a builder for updating this CardSchedule.
// Note that, you need to call CardSchedule.Unwrap() before calling this method, if this CardSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CardSchedule) Update() *CardScheduleUpdateOne {
	return (&CardScheduleClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cs *CardSchedule) Unwrap() *CardSchedule {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CardSchedule is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CardSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("CardSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(cs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(cs.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", scheduled_for=")
	builder.WriteString(cs.ScheduledFor.Format(time.ANSIC))
	builder.WriteString(", reviewed=")
	builder.WriteString(fmt.Sprintf("%v", cs.Reviewed))
	builder.WriteByte(')')
	return builder.String()
}

// CardSchedules is a parsable slice of CardSchedule.
type CardSchedules []*CardSchedule

func (cs CardSchedules) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
