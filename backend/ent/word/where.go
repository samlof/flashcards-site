// Code generated by entc, DO NOT EDIT.

package word

import (
	"flashcards-backend/ent/predicate"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LangData applies equality check predicate on the "langData" field. It's identical to LangDataEQ.
func LangData(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLangData), v))
	})
}

// Word1 applies equality check predicate on the "word1" field. It's identical to Word1EQ.
func Word1(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord1), v))
	})
}

// Word2 applies equality check predicate on the "word2" field. It's identical to Word2EQ.
func Word2(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord2), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// LangDataEQ applies the EQ predicate on the "langData" field.
func LangDataEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLangData), v))
	})
}

// LangDataNEQ applies the NEQ predicate on the "langData" field.
func LangDataNEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLangData), v))
	})
}

// LangDataIn applies the In predicate on the "langData" field.
func LangDataIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLangData), v...))
	})
}

// LangDataNotIn applies the NotIn predicate on the "langData" field.
func LangDataNotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLangData), v...))
	})
}

// LangDataGT applies the GT predicate on the "langData" field.
func LangDataGT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLangData), v))
	})
}

// LangDataGTE applies the GTE predicate on the "langData" field.
func LangDataGTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLangData), v))
	})
}

// LangDataLT applies the LT predicate on the "langData" field.
func LangDataLT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLangData), v))
	})
}

// LangDataLTE applies the LTE predicate on the "langData" field.
func LangDataLTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLangData), v))
	})
}

// LangDataContains applies the Contains predicate on the "langData" field.
func LangDataContains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLangData), v))
	})
}

// LangDataHasPrefix applies the HasPrefix predicate on the "langData" field.
func LangDataHasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLangData), v))
	})
}

// LangDataHasSuffix applies the HasSuffix predicate on the "langData" field.
func LangDataHasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLangData), v))
	})
}

// LangDataEqualFold applies the EqualFold predicate on the "langData" field.
func LangDataEqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLangData), v))
	})
}

// LangDataContainsFold applies the ContainsFold predicate on the "langData" field.
func LangDataContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLangData), v))
	})
}

// Word1EQ applies the EQ predicate on the "word1" field.
func Word1EQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord1), v))
	})
}

// Word1NEQ applies the NEQ predicate on the "word1" field.
func Word1NEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWord1), v))
	})
}

// Word1In applies the In predicate on the "word1" field.
func Word1In(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWord1), v...))
	})
}

// Word1NotIn applies the NotIn predicate on the "word1" field.
func Word1NotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWord1), v...))
	})
}

// Word1GT applies the GT predicate on the "word1" field.
func Word1GT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWord1), v))
	})
}

// Word1GTE applies the GTE predicate on the "word1" field.
func Word1GTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWord1), v))
	})
}

// Word1LT applies the LT predicate on the "word1" field.
func Word1LT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWord1), v))
	})
}

// Word1LTE applies the LTE predicate on the "word1" field.
func Word1LTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWord1), v))
	})
}

// Word1Contains applies the Contains predicate on the "word1" field.
func Word1Contains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWord1), v))
	})
}

// Word1HasPrefix applies the HasPrefix predicate on the "word1" field.
func Word1HasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWord1), v))
	})
}

// Word1HasSuffix applies the HasSuffix predicate on the "word1" field.
func Word1HasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWord1), v))
	})
}

// Word1EqualFold applies the EqualFold predicate on the "word1" field.
func Word1EqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWord1), v))
	})
}

// Word1ContainsFold applies the ContainsFold predicate on the "word1" field.
func Word1ContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWord1), v))
	})
}

// Word2EQ applies the EQ predicate on the "word2" field.
func Word2EQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord2), v))
	})
}

// Word2NEQ applies the NEQ predicate on the "word2" field.
func Word2NEQ(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWord2), v))
	})
}

// Word2In applies the In predicate on the "word2" field.
func Word2In(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWord2), v...))
	})
}

// Word2NotIn applies the NotIn predicate on the "word2" field.
func Word2NotIn(vs ...string) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWord2), v...))
	})
}

// Word2GT applies the GT predicate on the "word2" field.
func Word2GT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWord2), v))
	})
}

// Word2GTE applies the GTE predicate on the "word2" field.
func Word2GTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWord2), v))
	})
}

// Word2LT applies the LT predicate on the "word2" field.
func Word2LT(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWord2), v))
	})
}

// Word2LTE applies the LTE predicate on the "word2" field.
func Word2LTE(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWord2), v))
	})
}

// Word2Contains applies the Contains predicate on the "word2" field.
func Word2Contains(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWord2), v))
	})
}

// Word2HasPrefix applies the HasPrefix predicate on the "word2" field.
func Word2HasPrefix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWord2), v))
	})
}

// Word2HasSuffix applies the HasSuffix predicate on the "word2" field.
func Word2HasSuffix(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWord2), v))
	})
}

// Word2EqualFold applies the EqualFold predicate on the "word2" field.
func Word2EqualFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWord2), v))
	})
}

// Word2ContainsFold applies the ContainsFold predicate on the "word2" field.
func Word2ContainsFold(v string) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWord2), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Word {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Word(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Word) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		p(s.Not())
	})
}
