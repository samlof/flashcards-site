// Code generated by entc, DO NOT EDIT.

package ent

import (
	"flashcards-backend/ent/word"
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Word is the model entity for the Word schema.
type Word struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LangData holds the value of the "langData" field.
	LangData string `json:"langData,omitempty"`
	// Word1 holds the value of the "word1" field.
	Word1 string `json:"word1,omitempty"`
	// Word2 holds the value of the "word2" field.
	Word2 string `json:"word2,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Word) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // langData
		&sql.NullString{}, // word1
		&sql.NullString{}, // word2
		&sql.NullTime{},   // created_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Word fields.
func (w *Word) assignValues(values ...interface{}) error {
	if m, n := len(values), len(word.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	w.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field langData", values[0])
	} else if value.Valid {
		w.LangData = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field word1", values[1])
	} else if value.Valid {
		w.Word1 = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field word2", values[2])
	} else if value.Valid {
		w.Word2 = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		w.CreatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this Word.
// Note that, you need to call Word.Unwrap() before calling this method, if this Word
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Word) Update() *WordUpdateOne {
	return (&WordClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (w *Word) Unwrap() *Word {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Word is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Word) String() string {
	var builder strings.Builder
	builder.WriteString("Word(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", langData=")
	builder.WriteString(w.LangData)
	builder.WriteString(", word1=")
	builder.WriteString(w.Word1)
	builder.WriteString(", word2=")
	builder.WriteString(w.Word2)
	builder.WriteString(", created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Words is a parsable slice of Word.
type Words []*Word

func (w Words) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
